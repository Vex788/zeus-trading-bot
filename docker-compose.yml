version: '3.8'

services:
  # Crypto Trading Bot Application
  trading-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-trading-bot
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/trading_bot?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=trading_user
      - SPRING_DATASOURCE_PASSWORD=trading_password
      - KUCOIN_API_KEY=${KUCOIN_API_KEY:-}
      - KUCOIN_SECRET_KEY=${KUCOIN_SECRET_KEY:-}
      - KUCOIN_PASSPHRASE=${KUCOIN_PASSPHRASE:-}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-defaultEncryptionKey123456}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: trading-bot-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=trading_bot
      - MYSQL_USER=trading_user
      - MYSQL_PASSWORD=trading_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "trading_user", "-ptrading_password"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: trading-bot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-bot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - trading-network

  # Grafana for Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: trading-bot-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - trading-network
    depends_on:
      - prometheus

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  trading-network:
    driver: bridge